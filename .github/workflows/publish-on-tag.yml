name: Publish on Tag

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Configure npm authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken "$NODE_AUTH_TOKEN"
          npm config set //registry.npmjs.org/:always-auth true
          npm config set provenance true

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test --if-present

      - name: Build
        run: npm run build --if-present

      - name: Determine release metadata
        id: meta
        run: |
          set -euo pipefail
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          if [[ "$VERSION" == *-* ]]; then
            PRE_PART=${VERSION#*-}
            PREID=${PRE_PART%%.*}
            echo "dist_tag=$PREID" >> "$GITHUB_OUTPUT"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "dist_tag=latest" >> "$GITHUB_OUTPUT"
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          DIST_TAG: ${{ steps.meta.outputs.dist_tag }}
        run: npm publish --tag "$DIST_TAG"

      - name: Load release notes
        id: notes
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          git fetch --all --tags --prune
          NOTES_COMMIT=$(git log --all --grep="chore: add release notes for ${TAG}" --format=%H -n 1)
          FOUND=false
          if [ -n "$NOTES_COMMIT" ]; then
            git show "${NOTES_COMMIT}:RELEASE_NOTES.txt" > RELEASE_NOTES.txt
            FOUND=true
          elif [ -f RELEASE_NOTES.txt ]; then
            FOUND=true
          fi

          if [ "$FOUND" = true ] && [ -s RELEASE_NOTES.txt ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            {
              echo "body<<'EOF'"
              cat RELEASE_NOTES.txt
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body }}
          generateReleaseNotes: ${{ steps.notes.outputs.found != 'true' }}
          prerelease: ${{ steps.meta.outputs.prerelease == 'true' }}
