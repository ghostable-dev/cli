name: Cut Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to release from (defaults to default branch)
        required: false
        default: main
        type: string
      bump:
        description: Version bump to apply
        required: false
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
          - prepatch
          - preminor
          - premajor
      preid:
        description: Pre-release identifier (used with pre* bumps)
        required: false
        default: beta
        type: string
      explicit:
        description: Explicit version (overrides bump/preid)
        required: false
        type: string
      notes:
        description: Release notes (optional)
        required: false
        default: ""
        type: string

permissions:
  contents: write

jobs:
  cut-release:
    runs-on: ubuntu-latest
    env:
      TARGET_BRANCH: ${{ inputs.branch || github.event.repository.default_branch }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TARGET_BRANCH }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build (must pass before we tag)
        run: npm run build

      - name: Plan & apply version (no tag yet)
        id: plan
        shell: bash
        env:
          INPUT_EXPLICIT: ${{ inputs.explicit }}
          INPUT_BUMP: ${{ inputs.bump }}
          INPUT_PREID: ${{ inputs.preid }}
        run: |
          set -euo pipefail
          if [ -n "${INPUT_EXPLICIT}" ]; then
            NEXT="${INPUT_EXPLICIT}"
          else
            case "${INPUT_BUMP}" in
              prepatch|preminor|premajor|prerelease)
                NEXT="$(npm version "${INPUT_BUMP}" --preid "${INPUT_PREID}" --no-git-tag-version)";;
              *)
                NEXT="$(npm version "${INPUT_BUMP}" --no-git-tag-version)";;
            esac
            NEXT="${NEXT#v}"
          fi
          echo "NEXT=${NEXT}" >> "$GITHUB_ENV"
          echo "value=${NEXT}" >> "$GITHUB_OUTPUT"
          echo "Planned version: ${NEXT}"

      - name: Commit version (no tag yet)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json || true
          git commit -m "chore(release): v${NEXT}" || echo "No changes to commit"

      - name: Commit release notes (optional)
        if: ${{ inputs.notes != '' }}
        shell: bash
        env:
          NOTES: ${{ inputs.notes }}
        run: |
          set -euo pipefail
          printf '%s\n' "$NOTES" > RELEASE_NOTES.txt
          git add RELEASE_NOTES.txt
          git commit -m "chore: add release notes for v${NEXT}" || echo "No notes to commit"

      - name: Create tag & push
        shell: bash
        run: |
          set -euo pipefail
          git tag "v${NEXT}" || echo "Tag exists"
          git push origin "HEAD:${TARGET_BRANCH}"
          git push origin "v${NEXT}" || echo "Tag already pushed"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.NEXT }}
          name: v${{ env.NEXT }}
          body: ${{ inputs.notes }}
          generateReleaseNotes: true
          draft: false
          prerelease: ${{ contains(env.NEXT, '-') }}

      - name: Show created tag
        run: echo "Created tag: v${{ env.NEXT }}